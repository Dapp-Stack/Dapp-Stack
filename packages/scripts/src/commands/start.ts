process.env.BABEL_ENV = 'development';
process.env.NODE_ENV = 'development';

process.on('unhandledRejection', err => {
  throw err;
});

const isInteractive = process.stdout.isTTY;

import chalk  from 'chalk';
import * as webpack from 'webpack';
import * as WebpackDevServer from 'webpack-dev-server';
const opn = require('opn');

import * as consoleUtils from '../start/consoleUtils';
import * as webpackUtils from '../start/webpackUtils';

const paths = require('../config/paths');
const config = require('../config/webpack.config.dev');
const createDevServerConfig = require('../config/webpackDevServer.config');

const port = process.env.PORT || '3000';
const DEFAULT_PORT = parseInt(port, 10);
const HOST = process.env.HOST || '0.0.0.0';

if (process.env.HOST) {
  console.log(
    chalk.cyan(`Attempting to bind to HOST environment variable: ${chalk.yellow(chalk.bold(process.env.HOST))}`),
  );
  console.log(`If this was unintentional, check that you haven't mistakenly set it in your shell.`);
}

webpackUtils.choosePort(HOST, DEFAULT_PORT).then(port => {
  if (!port) {
    // We have not found a port.
    return;
  }
  const protocol = process.env.HTTPS === 'true' ? 'https' : 'http';
  const appName = require(paths.appPackageJson).name;
  const urls = webpackUtils.prepareUrls(protocol, HOST, port);
  // Create a webpack compiler that is configured with custom messages.
  const compiler = webpackUtils.createCompiler(webpack, config, appName, urls, paths.useYarn);
  // Load proxy config
  const proxySetting = require(paths.appPackageJson).proxy;
  const proxyConfig = webpackUtils.prepareProxy(proxySetting, paths.appPublic);
  // Serve webpack assets generated by the compiler over a web server.
  const serverConfig = createDevServerConfig(proxyConfig, urls.lanUrlForConfig);
  const devServer = new WebpackDevServer(compiler, serverConfig);
  // Launch WebpackDevServer.
  devServer.listen(port, HOST, err => {
    if (err) {
      return console.log(err);
    }
    if (isInteractive) {
      consoleUtils.clear();
    }
    console.log(chalk.cyan('Starting the development server...\n'));
    opn(urls.localUrlForBrowser);
  });

  ['SIGINT', 'SIGTERM'].forEach((sig) => {
    process.on(sig, function() {
      devServer.close();
      process.exit();
    });
  });
}).catch(err => {
  if (err && err.message) {
    console.log(err.message);
  }
  process.exit(1);
});
